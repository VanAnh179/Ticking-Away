package main;

import entity.Entity;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;

public class UI {
    //private MainFrame mainFrame;
    GamePanel gp;
    BufferedImage heart, keyImage, heart2;
    public boolean messageOn = false;
    public String message = "";
    int messageCounter = 0;
    public boolean gameFinished = false;
    public boolean gameWon = false; // Th√™m bi·∫øn gameWon
    protected Sound textSound = new Sound();
    protected Sound tutorialSound = new Sound();

    long startTime;
    private long lastBackgroundScoreUpdate;
    private boolean isRunning;
    
    public int visibleScore = 0;
    public int backgroundScore = 50000;
    public final int BG_SCORE_DECREASE = 13;

    // Th√™m c√°c bi·∫øn cho tutorial
    private boolean isTextComplete = false;
    public boolean showTutorial = true;
    private String[] tutorialPages = {
        "T√¥i ƒëang ·ªü ƒë√¢u th·∫ø n√†y‚Ä¶?",
        "...",
        "Kh√¥ng kh√≠ l·∫°nh bu·ªët.\nIm l·∫∑ng ƒë·∫øn ngh·∫πt th·ªü.",
        "Tr∆∞·ªõc m·∫Øt t√¥i l√† m·ªôt t√≤a l√¢u ƒë√†i ƒë·ªï n√°t,\nch√¨m trong b√≥ng t·ªëi.",
        "T√¥i kh√¥ng nh·ªõ m√¨nh l√† ai...\nkh√¥ng nh·ªõ v√¨ sao l·∫°i ·ªü ƒë√¢y.",
        "Nh∆∞ng trong ƒë·∫ßu...\nch·ªâ c√≥ duy nh·∫•t m·ªôt ƒëi·ªÅu vang l√™n:",
        "**T√¨m ch√¨a kh√≥a.\nM·ªü c√°nh c·ª≠a.**",
        "...",
        "Kh√¥ng c√≤n c√°ch n√†o kh√°c.",
        "T√¥i bu·ªôc ph·∫£i ti·∫øn v√†o.",
        "[PLAY_SOUND 14]",
        "Gi·ªù t√¥i ƒë·ª©ng ƒë√¢y...\ngi·ªØa nh·ªØng b·ª©c t∆∞·ªùng ƒë·ªï s·ª•p v√† b√≥ng t·ªëi v√¢y quanh.",
        "[PLAY_SOUND 15]",
        "·ª∞...!",
        "[SHOW_IMAGE portal_vision 2000]",
        "AAAAAA!!",
        "ƒê·∫ßu t√¥i‚Ä¶\nh∆∞ b·ªã x√© to·∫°c‚Ä¶",
        "Nh·ªØng h√¨nh ·∫£nh m·ªù nh√≤e...\nm·ªôt **c√°nh c·ª≠a ph√°t s√°ng**?",
        "L·∫Ω n√†o...\nƒë√≥ l√† l·ªëi ra?",
        "Ho·∫∑c... \nl√† th·ª© g√¨ ƒë√≥ c√≤n t·ªìi t·ªá h∆°n.",
        "T√¥i ph·∫£i \nr·ªùi kh·ªèi n∆°i n√†y ngay ‚Äì n·∫øu kh√¥ng mu·ªën m·∫•t tr√≠.",
        "May m√† t√¥i c√≤n gi·ªØ ƒë∆∞·ª£c ng·ªçn ƒëu·ªëc n√†y.",
        "Hy v·ªçng n√≥ ch√°y ƒë·ªß l√¢u \nƒë·ªÉ t√¥i t√¨m ra s·ª± th·∫≠t.",
        "...\nKhoan ƒë√£.",
        "T√¥i c·∫£m th·∫•y... \nm·ªôt th·ª© g√¨ ƒë√≥ trong tay m√¨nh.",
        "Kh√¥ng, kh√¥ng ph·∫£i trong tay. \nN√≥ ph√°t ra t·ª´ **B√™n trong t√¥i.**",
        "Nh∆∞ th·ªÉ... \nt√¥i c√≥ th·ªÉ ch·∫°m v√†o c·∫•u tr√∫c c·ªßa th·∫ø gi·ªõi n√†y‚Ä¶ \nv√† ph√° h·ªßy n√≥.",
        "...Bom?",
        "Ch·ªâ c·∫ßn t·∫≠p trung v√†o kh√¥ng kh√≠‚Ä¶ \ngom l·∫°i nh·ªØng h·∫°t c∆° b·∫£n‚Ä¶",
        "[SHAKE 10 30]",
        "[PLAY_SOUND 2]",
        "‚Ä¶T√¥i c√≥ th·ªÉ \n**t·∫°o ra bomb t·ª´ h∆∞ v√¥**.",
        "Th·ª© d·ªã nƒÉng n√†y‚Ä¶ \nsao t√¥i l·∫°i bi·∫øt c√°ch s·ª≠ d·ª•ng n√≥?",
        "D√π sao c≈©ng kh√¥ng c√≤n nhi·ªÅu th·ªùi gian n·ªØa.\nPh·∫£i t√¨m c√°ch tho√°t kh·ªèi ƒë√¢y th√¥i.",
        "Th·ª≠ v·ªõi vi√™n ƒë√° kia xem n√†o.",
        "[TUTORIAL ‚Äì H∆∞·ªõng d·∫´n ƒë·∫∑t bomb, ƒëi·ªÅu khi·ªÉn, s√°ng ƒëu·ªëc, t√¨m ch√¨a kh√≥a]",
        "- [üïπÔ∏è] **Di chuy·ªÉn**: D√πng c√°c ph√≠m m≈©i t√™n\n- [üí£] **ƒê·∫∑t bomb**: Ph√≠m [SPACE]\n- [üïØÔ∏è] **Duy tr√¨ √°nh s√°ng**: T√¨m Chest ƒë·ªÉ th·∫Øp s√°ng ƒëu·ªëc\n- [üîë] **M·ª•c ti√™u**: T√¨m ƒë·ªß ch√¨a kh√≥a ƒë·ªÉ m·ªü C·ªïng",
    };
    private int currentTutorialPage = 0;
    private int currentCharIndex = 0;
    private long lastCharTime;
    private final int CHAR_DELAY = 50; // Th·ªùi gian hi·ªán t·ª´ng ch·ªØ (ms)
    private final Color BORDER_COLOR = new Color(255, 105, 180); // M√†u vi·ªÅn h·ªìng

    public boolean hasShownKeyMessage = false;
    public int keyCharIndex = 0;
    public long keyLastCharTime;
    public boolean showKeySequence = false;
    public String[] keyMessages = {
        "...G√¨ ƒë√¢y?\nM·ªôt chi·∫øc... ch√¨a kh√≥a?",
        "[SHOW_IMAGE key_01d 2000]",
        "",
        "T√¥i... c·∫£m th·∫•y quen thu·ªôc m·ªôt c√°ch k·ª≥ l·∫°...",
        "Nh∆∞ th·ªÉ tay t√¥i t·ª´ng n·∫Øm n√≥‚Ä¶ h√†ng trƒÉm l·∫ßn tr∆∞·ªõc ƒë√≥.",
        "D√π kh√¥ng bi·∫øt t·∫°i sao, nh∆∞ng t√¥i ch·∫Øc ch·∫Øn:",
        "ƒê√¢y l√† m·ªôt ph·∫ßn ƒë·ªÉ m·ªü ra **c√°nh c·ª≠a ·∫•y**.",
        "C√≤n l·∫°i... m·∫•y chi·∫øc n·ªØa nh·ªâ?"
    };
    private int currentKeyPage = 0;

    public boolean showPortalSequence = false;
    public String[] portalMessages = {
        "...",
        "M·ªôt c√°nh c·ª≠a ph√°t s√°ng‚Ä¶",
        "Kh√¥ng gi·ªëng b·∫•t k·ª≥ th·ª© g√¨ t√¥i t·ª´ng th·∫•y.",
        "T√¥i ƒë∆∞a tay ch·∫°m th·ª≠‚Äînh∆∞ng n√≥ kh√¥ng ph·∫£n h·ªìi.",
        "...Kh√≥a l·∫°i r·ªìi.",
        "M·ªôt‚Ä¶ hai‚Ä¶ ba ·ªï kh√≥a?",
        "N√≥ c·∫ßn **ba ch√¨a kh√≥a**.",
        "V·∫´n ch∆∞a ƒë·ªß‚Ä¶",
        "Ph·∫£i ti·∫øp t·ª•c th√¥i."
    };
    private int currentPortalPage = 0;

    private Rectangle okButtonRect;

    public BufferedNameEffect currentEffect;
    public long effectStartTime;
    public boolean showEffect = false;
    private HashMap<String, BufferedImage> effectImages = new HashMap<>();

    private Rectangle menuButtonRect;
    private final Color MENU_BUTTON_COLOR = new Color(255, 105, 180); // M√†u h·ªìng
    private final Color MENU_BUTTON_TEXT_COLOR = Color.WHITE;


    public UI(GamePanel gp) {
        this.gp = gp;
        textSound.setFile(11);
        tutorialSound.setFile(12);
        effectImages = new HashMap<>(); // Kh·ªüi t·∫°o map
        try {
            // Th√™m load ·∫£nh
            BufferedImage portalImage = ImageIO.read(getClass().getResourceAsStream("/background/portal_vision.png"));
            BufferedImage keyEffectImage = ImageIO.read(getClass().getResourceAsStream("/objects/key_01d.png"));
            keyEffectImage = scaleImage(keyEffectImage, 128, 128);
            effectImages.put("key_01d", keyEffectImage);
            if (portalImage != null) {
                portalImage = scaleImage(portalImage, 256, 256);
                effectImages.put("portal_vision", portalImage);
                // System.out.println("ƒê√£ t·∫£i th√†nh c√¥ng ·∫£nh portal_vision");
            } else {
                // System.out.println("Kh√¥ng t√¨m th·∫•y file ·∫£nh portal_vision");
            }
            heart = ImageIO.read(getClass().getResourceAsStream("/objects/health.png"));
            heart2 = ImageIO.read(getClass().getResourceAsStream("/objects/heart2.png"));
            keyImage = ImageIO.read(getClass().getResourceAsStream("/objects/key_01d.png")); // Load ·∫£nh key
            keyImage = scaleImage(keyImage, 30, 30);
            heart2 = scaleImage(heart, 30, 30);
        } catch (IOException e) {
            System.err.println("L·ªói t·∫£i ·∫£nh:");
            e.printStackTrace();
        }
        resetTimer();
        // DEBUG
        // System.out.println("Danh s√°ch key trong effectImages:");
        // for (String key : effectImages.keySet()) {
        //     System.out.println("[" + key + "]");
        // }
    }
    
    private BufferedImage scaleImage(BufferedImage original, int width, int height) {
        BufferedImage scaledImage = new BufferedImage(width, height, original.getType());
        Graphics2D g2d = scaledImage.createGraphics();
        g2d.drawImage(original, 0, 0, width, height, null);
        g2d.dispose();
        return scaledImage;
    }

    public void resetTimer() {
        isRunning = false;
        visibleScore = 0;
        backgroundScore = 50000;
    }

    public void startTimer() {
        if(!isRunning || !showTutorial || !gp.isStartingEffect) {
            startTime = System.currentTimeMillis();
            lastBackgroundScoreUpdate = startTime;
            isRunning = true;
        }
    }

    public void update() {
        if (!gp.isPaused && isRunning && !showTutorial && !showKeySequence && !gp.isStartingEffect) {
            long currentTime = System.currentTimeMillis() - startTime - gp.totalPausedTime;
            if (currentTime - lastBackgroundScoreUpdate >= 1000) {
                backgroundScore -= BG_SCORE_DECREASE;
                if (backgroundScore < 0) backgroundScore = 0;
                lastBackgroundScoreUpdate = currentTime;
            }
        }
        if (showEffect && System.currentTimeMillis() - effectStartTime > currentEffect.duration) {
            System.out.println("Effect finished. Moving to next page.");
            showEffect = false;
            if (currentTutorialPage < tutorialPages.length - 1) {
                currentTutorialPage++; // Chuy·ªÉn trang
                currentCharIndex = 0; // Reset ch·ªâ s·ªë k√Ω t·ª±
                // ƒê·∫£m b·∫£o kh√¥ng k√≠ch ho·∫°t l·∫°i hi·ªáu ·ª©ng khi ƒë√£ chuy·ªÉn trang
                showEffect = false;
            }
            if (showKeySequence) {
                nextKeyPage(); // Chuy·ªÉn trang key
            } else if (showTutorial) {
                currentTutorialPage++;
                currentCharIndex = 0;
            }
        }
    }

    public void addScoreForRock(int points) {
        visibleScore += points;
    }

    public void addScore(Entity enemy) {
        gp.addScoreForEnemy(enemy);
    }

    public int getFinalScore() {
        if (gameFinished && !gameWon) {
            return visibleScore;
        }
        return visibleScore + backgroundScore;
    }

    private String getFormattedTime() {
        if (gp == null || !isRunning) return "00:00";
        long currentTime = System.currentTimeMillis() - startTime - gp.totalPausedTime;
        currentTime = Math.max(currentTime, 0);
        currentTime /= 1000;       
        int minutes = (int) (currentTime / 60);
        int seconds = (int) (currentTime % 60);
        return String.format("%02d:%02d", minutes, seconds);
    }

    private String formatScore(int score) {
        return String.format("%,d", score);
    }

    public void showMessage(String text) {
        message = text;
        messageOn = true;
    }
    
    public void draw(Graphics2D g2) {
        if (!gp.isStartingEffect) {
            drawHealthBar(g2);
            drawClock(g2);
            drawScore(g2);
            drawKeys(g2);
            drawMenuButton(g2);

            if (showTutorial) {
                drawTutorial(g2); // V·∫Ω h·ªôp tho·∫°i
            }

            if (showEffect) {
                drawImageEffect(g2);
            }

            if(gameFinished) {
                drawGameFinishedScreen(g2);
            }

            if(messageOn) {
                drawMessage(g2);
            }

            if (showKeySequence) {
                drawKeySequence(g2);
            }

            if (showPortalSequence) {
                drawPortalSequence(g2);
            }
        }
    }

    private void drawHealthBar(Graphics2D g2) {
        Composite originalComposite = g2.getComposite();
        try {
            int startY = 3;
            int spacing = 5;
            int heartSize = gp.tileSize;
            int startX = gp.screenWidth - 130 - (heartSize + spacing) * 4;
            
            //v·∫Ω m√°u th·∫≠tth·∫≠t
            for (int i = 0; i < gp.player.maxHealth; i++) {
                if (i < gp.player.health) {
                    g2.drawImage(heart, 
                            startX + (i * (heartSize + spacing)), 
                            startY, 
                            heartSize, heartSize, null);
                }
            }

            //v·∫Ω m√°u ·∫£o
            if (gp.player.tempHealth > 0) {
                long remainingTime = gp.player.tempHealthExpireTime - System.currentTimeMillis();
                if (remainingTime > 0) {
                    // T√≠nh alpha d·ª±a tr√™n th·ªùi gian c√≤n l·∫°i (30 gi√¢y = 30,000 ms)
                    float fadeDuration = 30000f; // 30 gi√¢y
                    float initialAlpha = 0.7f;
                    float alpha = initialAlpha * (remainingTime / fadeDuration);
                    if (alpha < 0) alpha = 0; // ƒê·∫£m b·∫£o alpha kh√¥ng √¢m
                    if (alpha > initialAlpha) alpha = initialAlpha; // Gi·ªõi h·∫°n alpha t·ªëi ƒëa

                    AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha);
                    g2.setComposite(ac);
                    int tempStartY = startY + heartSize + 5;
                    for (int i = 0; i < gp.player.tempHealth; i++) {
                        g2.drawImage(heart2, 
                                startX + (i * (heartSize + spacing)), 
                                tempStartY, 
                                heartSize, heartSize, null);
                    }
                } else {
                    // N·∫øu h·∫øt th·ªùi gian, ƒë·∫∑t tempHealth v·ªÅ 0
                    gp.player.tempHealth = 0;
                    gp.player.tempHealthExpireTime = 0;
                }
            }
        } finally {
            g2.setComposite(originalComposite);
        }
    }

    private void drawClock(Graphics2D g2) {
        Font originalFont = g2.getFont();
        Color originalColor = g2.getColor();
        Font timeFont = new Font("Arial", Font.BOLD, 30);
        g2.setFont(timeFont);
        g2.setColor(Color.white);
        String timeText = getFormattedTime();
        FontMetrics fm = g2.getFontMetrics();
        int x = (gp.screenWidth - fm.stringWidth(timeText)) / 2;
        int y = 40;
        g2.setColor(Color.white);
        g2.drawString(timeText, x, y);
        g2.setFont(originalFont);
        g2.setColor(originalColor);
    }

    private void drawScore(Graphics2D g2) {
        Font originalFont = g2.getFont();
        g2.setFont(new Font("Arial", Font.BOLD, 30));
        String scoreText = "Score: " + formatScore(visibleScore);
        int x = 20;
        int y = 40;
        g2.setColor(Color.white);
        g2.drawString(scoreText, x, y);
        g2.setFont(originalFont);
    }

    // ph∆∞∆°ng th·ª©c v·∫Ω n√∫t Menu
    private void drawMenuButton(Graphics2D g2) {
        int buttonWidth = 80;
        int buttonHeight = 30;
        int x = gp.screenWidth - buttonWidth - 40; // CƒÉn ph·∫£i
        int y = 15; // CƒÉn tr√™n

        // V·∫Ω n·ªÅn n√∫t
        g2.setColor(MENU_BUTTON_COLOR);
        g2.fillRoundRect(x, y, buttonWidth, buttonHeight, 15, 15);

        // V·∫Ω vi·ªÅn
        g2.setColor(Color.WHITE);
        g2.setStroke(new BasicStroke(2));
        g2.drawRoundRect(x, y, buttonWidth, buttonHeight, 15, 15);

        // V·∫Ω text
        g2.setColor(MENU_BUTTON_TEXT_COLOR);
        g2.setFont(new Font("Arial", Font.BOLD, 18));
        String text = "MENU";
        int textX = x + (buttonWidth - g2.getFontMetrics().stringWidth(text)) / 2;
        int textY = y + (buttonHeight / 2) + 7;
        g2.drawString(text, textX, textY);

        // L∆∞u v√πng click
        menuButtonRect = new Rectangle(x, y, buttonWidth, buttonHeight);
    }

    private void drawKeys(Graphics2D g2) {
        int keySize = gp.tileSize * 3 / 4; // K√≠ch th∆∞·ªõc ·∫£nh key
        int x = 20; // V·ªã tr√≠ b·∫Øt ƒë·∫ßu
        int y = 48 + 45; // D∆∞·ªõi ph·∫ßn Score
        
        // V·∫Ω h√¨nh ·∫£nh key
        g2.drawImage(keyImage, x, y - keySize, keySize, keySize, null);
        
        // V·∫Ω s·ªë l∆∞·ª£ng key
        g2.setFont(new Font("Arial", Font.BOLD, 30));
        g2.setColor(Color.WHITE);
        g2.drawString("x " + gp.hasKey, x + keySize + 5, y - 5);
    }

    private void drawGameFinishedScreen(Graphics2D g2) {
        g2.setColor(new Color(0, 0, 0, 180));
        g2.fillRect(0, 0, gp.screenWidth, gp.screenHeight);
        if (!textSound.clip.isRunning()) {
            textSound.setFile(13);
            textSound.play();
        }
        int boxWidth = gp.screenWidth * 3/4;
        int boxHeight = gp.screenHeight / 2;
        int boxX = (gp.screenWidth - boxWidth) / 2;
        int boxY = (gp.screenHeight - boxHeight) / 2;

        g2.setColor(new Color(30, 30, 30));
        g2.fillRoundRect(boxX, boxY, boxWidth, boxHeight, 20, 20);

        g2.setColor(gameWon ? new Color(50, 200, 50) : new Color(200, 50, 50));
        g2.setStroke(new BasicStroke(5));
        g2.drawRoundRect(boxX, boxY, boxWidth, boxHeight, 20, 20);

        String text = gameWon ? "You Won!" : "Game Over";
        g2.setFont(new Font("Arial", Font.BOLD, 80));
        g2.setColor(Color.white);
        int x = getXForCenteredText(text, g2);
        int y = boxY + boxHeight/2 - 20;
        g2.drawString(text, x, y);

        g2.setFont(new Font("Arial", Font.PLAIN, 30));
        String scoreText = "Final Score: " + formatScore(getFinalScore());
        x = getXForCenteredText(scoreText, g2);
        y += 60;
        g2.drawString(scoreText, x, y);

        g2.setFont(new Font("Arial", Font.PLAIN, 25));
        String restartText = "Press R to restart";
        x = getXForCenteredText(restartText, g2);
        y += 40;
        g2.drawString(restartText, x, y);
    }

    private void drawMessage(Graphics2D g2) {
        g2.setColor(Color.white);
        g2.setFont(new Font("Arial", Font.PLAIN, 20));
        g2.drawString(message, 20, gp.screenHeight - 80);
        messageCounter++;
        if(messageCounter > 120) {
            messageCounter = 0;
            messageOn = false;
        }
    }

    private int getXForCenteredText(String text, Graphics2D g2) {
        int length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
        return gp.screenWidth / 2 - length / 2;
    }

    public void nextTutorialPage() {
        if (currentTutorialPage < tutorialPages.length - 1) {
            textSound.stop();
            currentTutorialPage++;
            currentCharIndex = 0;
            isTextComplete = false;
        } else {
            showTutorial = false;
            startTimer(); // B·∫Øt ƒë·∫ßu ƒë·∫øm khi h·ªôp tho·∫°i k·∫øt th√∫c
        }
    }

    private void drawKeySequence(Graphics2D g2) {
        String fullText = keyMessages[currentKeyPage];
    
        if (fullText.startsWith("[SHOW_IMAGE")) {
            // K√≠ch ho·∫°t hi·ªáu ·ª©ng ·∫£nh v√† t·ª± ƒë·ªông chuy·ªÉn trang khi h·∫øt th·ªùi gian
            if (!showEffect) {
                checkForImageEffect(fullText);
            }
            drawImageEffect(g2);
        } else {
            // X·ª≠ l√Ω hi·ªÉn th·ªã t·ª´ng k√Ω t·ª±
            if (System.currentTimeMillis() - lastCharTime > CHAR_DELAY && currentCharIndex < fullText.length()) {
                currentCharIndex++;
                lastCharTime = System.currentTimeMillis();
            }
            // V·∫Ω h·ªôp tho·∫°i v·ªõi n·ªôi dung hi·ªán t·∫°i
            drawTextBox(g2, fullText, currentCharIndex, 150, "-> ti·∫øp", true);
        }
    }

    private void drawPortalSequence(Graphics2D g2) {
        String fullText = portalMessages[currentPortalPage];
        if (System.currentTimeMillis() - lastCharTime > CHAR_DELAY && currentCharIndex < fullText.length()) {
            currentCharIndex++;
            lastCharTime = System.currentTimeMillis();
        }
        drawTextBox(g2, fullText, currentCharIndex, 150, "-> ti·∫øp", false);
    }

    private void drawTutorial(Graphics2D g2) {
        if (!showTutorial) return;
        String fullText = tutorialPages[currentTutorialPage];
        if (!tutorialSound.clip.isRunning()) {
            tutorialSound.play();
        }
        // X·ª≠ l√Ω hi·ªáu ·ª©ng rung
        if (fullText.startsWith("[SHAKE")) {
            String[] parts = fullText.split(" ");
            int intensity = Integer.parseInt(parts[1]);
            
            // S·ª≠a ·ªü ƒë√¢y: Lo·∫°i b·ªè k√Ω t·ª± ']' kh·ªèi ph·∫ßn duration
            String durationStr = parts[2].replace("]", ""); 
            int duration = Integer.parseInt(durationStr);
            
            gp.triggerShake(intensity, duration);
            nextTutorialPage();
            return;
        }
        
        // X·ª≠ l√Ω ph√°t √¢m thanh
        if (fullText.startsWith("[PLAY_SOUND")) {
            String[] parts = fullText.split(" ");
            int soundIndex = Integer.parseInt(parts[1].replace("]", ""));
            Sound effect = new Sound();
            effect.setFile(soundIndex);
            effect.play();
            nextTutorialPage();
            return;
        }
        // X·ª≠ l√Ω trang hi·ªáu ·ª©ng
        if (fullText.startsWith("[SHOW_IMAGE")) {
            if (!showEffect) { // Ch·ªâ k√≠ch ho·∫°t hi·ªáu ·ª©ng m·ªôt l·∫ßn
                String[] parts = fullText.split(" ");
                String imageName = parts[1].trim();
                String durationStr = parts[2].replace("]", "").trim();
                int duration = Integer.parseInt(durationStr);
                triggerImageEffect(imageName, duration);
            }
            drawImageEffect(g2); // V·∫Ω ·∫£nh
            return; // Kh√¥ng v·∫Ω n√∫t "Next" cho trang n√†y
        }

        // X·ª≠ l√Ω hi·ªÉn th·ªã t·ª´ng k√Ω t·ª±
        if (System.currentTimeMillis() - lastCharTime > CHAR_DELAY && currentCharIndex < fullText.length()) {
            currentCharIndex++;
            lastCharTime = System.currentTimeMillis();
            isTextComplete = (currentCharIndex >= fullText.length()); // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        }
        
        drawTextBox(g2, fullText, currentCharIndex, 150, "-> ti·∫øp", false);
    }

    private void drawTextBox(Graphics2D g2, String fullText, int currentIndex, int boxHeight, String buttonLabel, boolean drawButton) {
        int boxWidth = gp.screenWidth - 100;
        int boxX = 50;
        int boxY = 120;

        if (currentIndex >= fullText.length()) {
            if (textSound.clip != null && textSound.clip.isRunning()) {
                textSound.stop();
            }
        }
        else {
            // Ch·ªâ ph√°t khi ch∆∞a k·∫øt th√∫c v√† kh√¥ng ph·∫£i kho·∫£ng tr·∫Øng
            if (fullText.charAt(currentIndex) != ' ' && !textSound.clip.isRunning()) {
                textSound.loop();
            }
        }
        // V·∫Ω n·ªÅn
        g2.setColor(Color.BLACK);
        g2.fillRoundRect(boxX, boxY, boxWidth, boxHeight, 20, 20);
        g2.setColor(BORDER_COLOR);
        g2.setStroke(new BasicStroke(3));
        g2.drawRoundRect(boxX, boxY, boxWidth, boxHeight, 20, 20);

        float alpha = Math.min(1.0f, (currentIndex / (float) fullText.length()) * 2); // TƒÉng t·ªëc ƒë·ªô fade
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
        // C·∫Øt text ƒë·∫øn ch·ªâ s·ªë hi·ªán t·∫°i
        String displayText = fullText.substring(0, Math.min(currentIndex, fullText.length()));
        String[] lines = displayText.split("\n");

        Font originalFont = g2.getFont();
        int startY = boxY + 40;
        
        for (String line : lines) {
            int currentX = boxX + 20;
            String[] segments = line.split("\\*\\*"); // T√°ch b·∫±ng **
            boolean isBold = false; // Flag ƒë·ªÉ x√°c ƒë·ªãnh ƒëo·∫°n bold
            
            for (String segment : segments) {
                if (!segment.isEmpty()) {
                    // ƒê·ªïi font n·∫øu l√† ƒëo·∫°n bold
                    if (isBold) {
                        g2.setFont(originalFont.deriveFont(Font.BOLD));
                    } else {
                        g2.setFont(originalFont.deriveFont(Font.PLAIN));
                    }
                    
                    // V·∫Ω ƒëo·∫°n text
                    g2.drawString(segment, currentX, startY);
                    
                    // C·∫≠p nh·∫≠t v·ªã tr√≠ X
                    currentX += g2.getFontMetrics().stringWidth(segment);
                }
                isBold = !isBold; // ƒê·∫£o tr·∫°ng th√°i bold
            }
            startY += 30; // Xu·ªëng d√≤ng
        }

        // Kh√¥i ph·ª•c font g·ªëc
        g2.setFont(originalFont);
        g2.setComposite(AlphaComposite.SrcOver);
        // Hi·ªáu ·ª©ng fade-in

        if (currentTutorialPage == tutorialPages.length - 1) {
            drawButton = false;
        }

        // V·∫Ω n√∫t n·∫øu c·∫ßn
        if (drawButton) {
            int buttonWidth = 80;
            int buttonHeight = 30;
            int buttonX = boxX + boxWidth - buttonWidth - 20;
            int buttonY = boxY + boxHeight - buttonHeight - 10;

            g2.setColor(BORDER_COLOR);
            g2.fillRoundRect(buttonX, buttonY, buttonWidth, buttonHeight, 10, 10);
            g2.setColor(Color.WHITE);
            g2.drawString(buttonLabel, buttonX + 15, buttonY + 20);
        
            // L∆∞u v·ªã tr√≠ n√∫t OK ƒë·ªÉ x·ª≠ l√Ω click
            okButtonRect = new Rectangle(buttonX, buttonY, buttonWidth, buttonHeight);
        } else if (currentTutorialPage < tutorialPages.length - 1) {
            // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n click ƒë·ªÉ ti·∫øp t·ª•c
            g2.setFont(new Font("Arial", Font.ITALIC, 18));
            String clickText = "Click anywhere to continue...";
            int textWidth = g2.getFontMetrics().stringWidth(clickText);
            g2.drawString(clickText, boxX + boxWidth - textWidth - 20, boxY + boxHeight - 15);
        }
    }

    // Ph∆∞∆°ng th·ª©c v·∫Ω hi·ªáu ·ª©ng
    private void drawImageEffect(Graphics2D g2) {
        if (currentEffect == null || currentEffect.image == null) return;

        long elapsed = System.currentTimeMillis() - effectStartTime;
        
        // T·∫°o hi·ªáu ·ª©ng nh·∫•p nh√°y to√†n m√†n h√¨nh b·∫±ng l·ªõp ph·ªß tr·∫Øng
        float flashIntensity = (float) Math.abs(Math.sin(elapsed / 200.0)) * 0.6f; // D√πng sin ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng m∆∞·ª£t
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, flashIntensity));
        g2.setColor(Color.WHITE);
        g2.fillRect(0, 0, gp.screenWidth, gp.screenHeight);
        
        // V·∫Ω ·∫£nh g·ªëc kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi opacity
        Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.SrcOver); // Reset composite
        g2.drawImage(
            currentEffect.image, 
            gp.screenWidth/2 - currentEffect.image.getWidth()/2,
            gp.screenHeight/2 - currentEffect.image.getHeight()/2,
            null
        );
        g2.setComposite(originalComposite);
        
        // T·ª± ƒë·ªông t·∫Øt hi·ªáu ·ª©ng sau khi ƒë·ªß th·ªùi gian
        if (elapsed > currentEffect.duration) {
            showEffect = false;
        }
    }

    public void triggerKeySequence() {
        showKeySequence = true;
        currentKeyPage = 0;
    }

    private void nextKeyPage() {
        if (currentKeyPage < keyMessages.length - 1) {
            currentKeyPage++;
            currentCharIndex = 0; // Reset ch·ªâ s·ªë k√Ω t·ª± khi chuy·ªÉn trang
            checkForImageEffect(keyMessages[currentKeyPage]); // Ki·ªÉm tra hi·ªáu ·ª©ng ·ªü trang m·ªõi
        } else {
            showKeySequence = false;
        }
    }

    private void checkForImageEffect(String text) {
        if (text.startsWith("[SHOW_IMAGE")) {
            String[] parts = text.split(" ");
            String imageName = parts[1].trim();
            String durationStr = parts[2].replace("]", "").trim();
            int duration = Integer.parseInt(durationStr);
            triggerImageEffect(imageName, duration);
            
            // T·ª± ƒë·ªông chuy·ªÉn trang sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
            new java.util.Timer().schedule(
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                        nextKeyPage();
                    }
                }, 
                duration
            );
        }
    }

    public void triggerPortalSequence() {
        showPortalSequence = true;
        currentPortalPage = 0;
    }

    private void nextPortalPage() {
        if (currentPortalPage < portalMessages.length - 1) {
            currentPortalPage++;
        } else {
            showPortalSequence = false;
            // K√≠ch ho·∫°t ki·ªÉm tra key sau khi h·ªôi tho·∫°i k·∫øt th√∫c
            gp.eventObj.checkPortalAfterDialog();
        }
    }

    // Ph∆∞∆°ng th·ª©c trigger effect
    private void triggerImageEffect(String imageName, int duration) {
        BufferedImage img = effectImages.get(imageName);
        if (img != null) {
            currentEffect = new BufferedNameEffect(img, duration);
            effectStartTime = System.currentTimeMillis();
            showEffect = true;
            // System.out.println("Triggered effect: " + imageName + ", duration: " + duration + "ms");
        } else {
            System.err.println("Kh√¥ng t√¨m th·∫•y ·∫£nh: " + imageName);
        }
    }

    public void handleClick(int mouseX, int mouseY) {
        if (gp.isStartingEffect) {
            return;
        }
        if (menuButtonRect != null && menuButtonRect.contains(mouseX, mouseY)) {
            gp.mainFrame.switchToMenu();
            gp.pauseGame();
            return;
        }
        if (showKeySequence) {
            showKeySequence = false;
        } 
        // X·ª≠ l√Ω click khi ƒëang hi·ªÉn th·ªã ·∫£nh effect
        else if (showEffect) { 
            showEffect = false;
            nextTutorialPage();
            //gp.triggerShake(0, 0);
        } 
        // Cho ph√©p click b·∫•t k·ª≥ ƒë√¢u ƒë·ªÉ ti·∫øp t·ª•c khi ƒëang trong tutorial (kh√¥ng ph·∫£i effect)
        else if (showTutorial && !showEffect) {
            if (!isTextComplete) {
                // N·∫øu text ch∆∞a hi·ªÉn th·ªã h·∫øt: hi·ªÉn th·ªã ngay to√†n b·ªô
                currentCharIndex = tutorialPages[currentTutorialPage].length();
                isTextComplete = true;
            } else {
                // N·∫øu text ƒë√£ hi·ªÉn th·ªã ƒë·ªß: chuy·ªÉn trang
                nextTutorialPage();
                isTextComplete = false; // Reset cho trang m·ªõi
            }
        }
        if (showKeySequence) {
            String currentText = keyMessages[currentKeyPage];
            
            // N·∫øu ƒëang hi·ªÉn th·ªã ·∫£nh, b·ªè qua x·ª≠ l√Ω click
            if (currentText.startsWith("[SHOW_IMAGE")) return;
            
            if (currentCharIndex < currentText.length()) {
                currentCharIndex = currentText.length(); // Hi·ªÉn th·ªã to√†n b·ªô text
            } else {
                nextKeyPage(); // Chuy·ªÉn trang khi click l·∫ßn n·ªØa
            }
        } else if (showPortalSequence) {
            if (currentCharIndex < portalMessages[currentPortalPage].length()) {
                currentCharIndex = portalMessages[currentPortalPage].length();
            } else {
                nextPortalPage();
            }
        } else if (!showTutorial) {
            tutorialSound.stop();
        }
    }

}